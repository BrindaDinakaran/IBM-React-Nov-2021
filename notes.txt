JavaScript
============================================================================
Line Oriented
Procedural
Object Based
Object Oriented (JS)
Functional (JS)
    Function is a first class citizen
        (Functions can be treated like data / object )
        functions can be created like objects
        functions can have attributes (like objects)
        functions can have methods (like objects)
        Support for Higher Order Functions
            functions can be passed as arguments to other functions
            functions can be returned from other functions


static
dynamic (JS)

strongly typed
loosely typed (JS)

JavaScript is a functional, dynamic and loosely typed language


Function invocation Patterns
    - As a function
        this => global (window)

    - As a method of an object
        this => object

    - Using the 'call' method of the function
    - Using the 'apply' method of the function
    - As an 'Immediately invoked function expression' (IIFE)
    - Using the 'new' keyword

this -> Invocation context
    It does not matter WHERE the function is. What matters is how the function is invoked.

arguments
    - implicit value available in all functions
    - array like object containing all the argument values passed to the function
        arguments.length -> the # of arguments passed to the function
        arguments[0], arguments[1] .....



IBM-React-Nov-2020
    Assignment-1


add()
add(10)
add(10,20,30,40,50)
add(10,'20',30,40,50)
add(10,'20','abc',30,40,50)
add([10,'20','abc'],[30,40,50])
add([10,'20','abc'],[30,[40,50]])
add(function(){ return [10,'20','abc'];},function(){ return [30,[40,50]]; })
add([function(){ return [10,'20','abc'];},function(){ return [30,[40,50]]; }])
add(function(){ return [function(){ return [10,'20','abc'];},function(){ return [30,[40,50]]; }];})

Closures
================================================================

ClickTracker.html
    A button 'Track'
    Everytime the 'Track' button is clicked, the page has to count the number of times the button is clicked and display to the user


Assignment-2
    (THIS DOESNOT INVOLE HTML, BUTTON, CLICK EVENT HANDLER ETC)
    
    var spinner = /*................................*/
    //spinner must be an object with two methods - up() & down()

    spinner.up() // => 1
    spinner.up() // => 2
    spinner.up() // => 3
    spinner.up() // => 4

    spinner.down() // => 3
    spinner.down() // => 2
    spinner.down() // => 1
    spinner.down() // => 0
    spinner.down() // => -1

    Important :
        There should NO other way by which the outcome of up & down methods can be influenced

        For ex:
        The following SHOULD NOT BE POSSIBLE
            spinner.count = 10000
            spinner.up() // => 10001

            window.count = 10000
            spinner.up() // => 10001

    
Constructor functions
===============================
Function invoked using the 'new' keyword
    1. this -> new object
    2. this -> returned by default
Convention : the constructor function name should start with an uppercase


Prototypal Inheritance
===================================

One object (prototype) acts as the base object for a family of objects

Attributes are resolved using 'prototype hopping'

'prototype hopping' happens ONLY when the attribute is READ


Videos for reference:
    http://bit.ly/javascript-training-videos



ES6 (ESNext, ES2015)
================================
1. let
2. const
3. Array destructuring
4. Rest Operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest Operator (Object)
8. Spread operator (Object)
9. Default arguments
10. Arrow functions
11. Template strings
12. Class

http://es6-features.org
